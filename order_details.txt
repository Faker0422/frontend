import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { OrderDetailsComponent } from './components/order-details/order-details.component';

const routes: Routes = [
  { path: 'order-details/:orderItemId', component: OrderDetailsComponent },
  { path: '', redirectTo: '/order-details/1', pathMatch: 'full' } // Default route (for testing)
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }










import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { OrderDetailsService } from '../../services/order-details.service';
import { OrderItemDetailResponseDTO } from '../../models/order-item-detail-response.dto';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent implements OnInit {
  order$!: Observable<OrderItemDetailResponseDTO>;

  constructor(
    private orderDetailsService: OrderDetailsService,
    private route: ActivatedRoute
  ) {}

  ngOnInit() {
    const orderItemId = Number(this.route.snapshot.paramMap.get('orderItemId')); // Get orderItemId from URL
    if (orderItemId) {
      this.order$ = this.orderDetailsService.getOrderDetails(orderItemId);
    }
  }
}




<div class="order-details" *ngIf="order$ | async as order">
  <p>Your shipment was just dropped off. Go on. Open it and enjoy.</p>
  
  <!-- Pass data to Order Summary Component -->
  <app-order-summary [order]="order"></app-order-summary>
</div>



import { Component, Input } from '@angular/core';
import { OrderItemDetailResponseDTO } from '../../models/order-item-detail-response.dto';

@Component({
  selector: 'app-order-summary',
  templateUrl: './order-summary.component.html',
  styleUrls: ['./order-summary.component.css']
})
export class OrderSummaryComponent {
  @Input() order!: OrderItemDetailResponseDTO; // Receiving order details from parent
}



<div class="order-summary">
  <div><strong>Order ID:</strong> {{ order.orderId }}</div>
  <div><strong>Order Item ID:</strong> {{ order.orderItemId }}</div>
  <div><strong>Product ID:</strong> {{ order.productId }}</div>
  <div><strong>Product Name:</strong> {{ order.productName }}</div>
  <div><strong>Price:</strong> {{ order.price }}</div>
  <div><strong>Quantity:</strong> {{ order.quantity }}</div>
  <div><strong>Discount:</strong> {{ order.discount }}</div>
  <div><strong>Total Price:</strong> {{ order.totalPrice }}</div>
  <div><strong>Image:</strong> <img [src]="order.image" alt="Product Image"></div>
  <div><strong>Delivery Address:</strong> {{ order.deliveryAddress.street }}, {{ order.deliveryAddress.city }}, {{ order.deliveryAddress.state }} {{ order.deliveryAddress.zip }}</div>
  <div><strong>Delivery Date:</strong> {{ order.deliveryDate }}</div>
  <div><strong>Order Status:</strong> {{ order.orderStatus }}</div>
  <div><strong>Shipping Fee:</strong> {{ order.highlightShippingFee }}</div>
</div>



import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { OrderDetailsComponent } from './components/order-details/order-details.component';
import { OrderSummaryComponent } from './components/order-summary/order-summary.component';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent,
    OrderDetailsComponent,
    OrderSummaryComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }



















<div class="order-details" *ngIf="order$ | async as order">
  <p>Your shipment was just dropped off. Go on. Open it and enjoy.</p>
  <div class="order-summary">
    <div><strong>Order ID:</strong> {{ order.orderId }}</div>
    <div><strong>Order Item ID:</strong> {{ order.orderItemId }}</div>
    <div><strong>Product ID:</strong> {{ order.productId }}</div>
    <div><strong>Product Name:</strong> {{ order.productName }}</div>
    <div><strong>Price:</strong> {{ order.price }}</div>
    <div><strong>Quantity:</strong> {{ order.quantity }}</div>
    <div><strong>Discount:</strong> {{ order.discount }}</div>
    <div><strong>Total Price:</strong> {{ order.totalPrice }}</div>
    <div><strong>Image:</strong> <img src="{{ order.image }}" alt="Product Image"></div>
    <div><strong>Delivery Address:</strong> {{ order.deliveryAddress.street }}, {{ order.deliveryAddress.city }}, {{ order.deliveryAddress.state }} {{ order.deliveryAddress.zip }}</div>
    <div><strong>Delivery Date:</strong> {{ order.deliveryDate }}</div>
    <div><strong>Order Status:</strong> {{ order.orderStatus }}</div>
    <div><strong>Shipping Fee:</strong> {{ order.highlightShippingFee }}</div>
  </div>
</div>



NG1: Property 'order' does not exist on type 'OrderDetailsComponent'. Did you mean 'order$'?
src/app/components/order-details/order-details.component.html:3:32










<div class="order-details">
    <p>Your shipment was just dropped off. Go on. Open it and enjoy.</p>
    <app-order-summary [order]="order"></app-order-summary>
  </div>
  
import { Component, OnInit } from '@angular/core';
import { OrderDetailsService } from '../services/order-details.service';
import { OrderItemDetailResponseDTO } from '../models/order-item-detail-response.dto';

@Component({
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent implements OnInit {
  order!: OrderItemDetailResponseDTO;

  constructor(private orderDetailsService: OrderDetailsService) {}

  ngOnInit() {
    this.fetchOrderDetails(1); // Fetch order details for orderItemId 1 (Change as needed)
  }

  fetchOrderDetails(orderItemId: number) {
    this.orderDetailsService.getOrderDetails(orderItemId)
      .subscribe(
        data => {
          this.order = data;
        },
        error => {
          console.error('Error fetching order details:', error);
        }
      );
  }
}

// services/order-details.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrderItemDetailResponseDTO } from '../models/order-item-detail-response.dto';

@Injectable({
  providedIn: 'root'
})
export class OrderDetailsService {
  private apiUrl = 'http://localhost:8080/api/order/order-details';

  constructor(private http: HttpClient) {}

  getOrderDetails(orderItemId: number): Observable<OrderItemDetailResponseDTO> {
    return this.http.get<OrderItemDetailResponseDTO>(`${this.apiUrl}/${orderItemId}`);
  }
}

// models/order-item-detail-response.dto.ts
export interface OrderItemDetailResponseDTO {
  orderId: number;
  orderItemId: number;
  productId: number;
  productName: string;
  price: number;
  quantity: number;
  discount: number;
  totalPrice: number;
  image: string;
  deliveryAddress: {
    street: string;
    city: string;
    state: string;
    zip: string;
  };
  deliveryDate: string;
  orderStatus: string;
  highlightShippingFee: number;
}

// order-details.component.html
<div class="order-details" *ngIf="order">
  <p>Your shipment was just dropped off. Go on. Open it and enjoy.</p>
  <div class="order-summary">
    <div><strong>Order ID:</strong> {{ order.orderId }}</div>
    <div><strong>Order Item ID:</strong> {{ order.orderItemId }}</div>
    <div><strong>Product ID:</strong> {{ order.productId }}</div>
    <div><strong>Product Name:</strong> {{ order.productName }}</div>
    <div><strong>Price:</strong> {{ order.price }}</div>
    <div><strong>Quantity:</strong> {{ order.quantity }}</div>
    <div><strong>Discount:</strong> {{ order.discount }}</div>
    <div><strong>Total Price:</strong> {{ order.totalPrice }}</div>
    <div><strong>Image:</strong> <img src="{{ order.image }}" alt="Product Image"></div>
    <div><strong>Delivery Address:</strong> {{ order.deliveryAddress.street }}, {{ order.deliveryAddress.city }}, {{ order.deliveryAddress.state }} {{ order.deliveryAddress.zip }}</div>
    <div><strong>Delivery Date:</strong> {{ order.deliveryDate }}</div>
    <div><strong>Order Status:</strong> {{ order.orderStatus }}</div>
    <div><strong>Shipping Fee:</strong> {{ order.highlightShippingFee }}</div>
  </div>
</div>

// order-details.component.css
.order-details {
  padding: 20px;
  background: white;
  border-radius: 5px;
}

















<div class="order-summary">
    <div><strong>Order ID:</strong> {{ order.orderId }}</div>
    <div><strong>Order Item ID:</strong> {{ order.orderItemId }}</div>
    <div><strong>Product ID:</strong> {{ order.productId }}</div>
    <div><strong>Product Name:</strong> {{ order.productName }}</div>
    <div><strong>Price:</strong> {{ order.price }}</div>
    <div><strong>Quantity:</strong> {{ order.quantity }}</div>
    <div><strong>Discount:</strong> {{ order.discount }}</div>
    <div><strong>Total Price:</strong> {{ order.totalPrice }}</div>
    <div><strong>Image:</strong> <img src="{{ order.image }}" alt="Product Image"></div>
    <div><strong>Delivery Address:</strong> {{ order.deliveryAddress }}</div>
    <div><strong>Delivery Date:</strong> {{ order.deliveryDate }}</div>
    <div><strong>Order Status:</strong> {{ order.orderStatus }}</div>
    <div><strong>Shipping Fee:</strong> {{ order.highlightShippingFee }}</div>
</div>






import { Component } from '@angular/core';

@Component({
  selector: 'app-order-details',
  standalone: false,
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent {
  
  order = {
    date: 'Oct 24, 2019',
    orderNumber: '1',
    orderItemId: '1',
    productId:'1',
    productName: 'Product 1',
    totalPrice: '50',
    quantity: '2',
    image: 'image1.jpg',
    deliveryDate: '2025-02-20',
    orderStatus: 'DELIVERED',
    shippingAddress: 'Smiles Davis, 600 Montgomery St, CA 94111',
    highlightShippingFee: '$0.00',
    discount: '- $49.00',
    total: '100',
  };
}
above is static data but i want to replace this with the data from my db and below is my dto and backend code
package com.genckart.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.sql.Timestamp;
import java.time.LocalDate;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class OrderItemDetailResponseDTO {
//    private OrderItemDTO orderItem;
    private Integer orderId;
    private Integer orderItemId;
    private Integer productId;
    private String productName;
    private Double price;
    private Integer quantity;
    private Double discount;
    private Double totalPrice;
    private String image;
    private AddressDTO deliveryAddress;
    private LocalDate deliveryDate;
    private String orderStatus;
    private double highlightShippingFee;
    private Timestamp createdAt;
}

service layer code:

@Override
    public OrderItemDetailResponseDTO getOrderItemWithDetails(Integer orderItemId) {
        OrderItem orderItem = orderItemRepository.findByOrderItemId(orderItemId)
                .orElseThrow(() -> new OrderItemNotFoundException("Order Item not found with ID: " + orderItemId));
        Order order = orderItem.getOrder(); // Get the associated Order

        if (order == null) {
            return null;
        }

        OrderItemDetailResponseDTO responseDTO = new OrderItemDetailResponseDTO();
//        responseDTO.setOrderItem(convertToOrderItemDTO(orderItem));

        OrderDTO orderDTO = convertToDTO(order);
        responseDTO.setOrderId(orderDTO.getOrderId());
        responseDTO.setDeliveryAddress(orderDTO.getDeliveryAddress());
        responseDTO.setDeliveryDate(orderDTO.getDeliveryDate());
        responseDTO.setOrderStatus(order.getOrderStatus()); // Set orderStatus from Order

        OrderItemDTO orderItemDTO = convertToOrderItemDTO(orderItem);
        responseDTO.setOrderItemId(orderItemDTO.getOrderItemId());
        responseDTO.setProductId(orderItemDTO.getProductId());
        responseDTO.setQuantity(orderItemDTO.getQuantity());
        responseDTO.setTotalPrice(orderItemDTO.getTotalPrice());
        responseDTO.setTotalPrice(orderItemDTO.getTotalPrice());
        responseDTO.setCreatedAt(orderItemDTO.getCreatedAt());

        // Fetch product details from Product Service to get productName, discount, image, shipping fee
        ResponseEntity<ProductDTO> productResponse = productClient.getProductById(orderItem.getProductId());
        if (productResponse.hasBody()) {
            ProductDTO product = productResponse.getBody();
            responseDTO.setProductName(product.getName());
            responseDTO.setDiscount(product.getDiscount());
            responseDTO.setImage(product.getImage1());
            responseDTO.setPrice(product.getNewPrice());
            responseDTO.setHighlightShippingFee(product.getHighlightShippingFee());
        } else {
            responseDTO.setProductName("Unknown Product");
            responseDTO.setDiscount(0.0);
            responseDTO.setImage(null);
            responseDTO.setHighlightShippingFee(0.0);
        }

        return responseDTO;
    }

controller layer code:

@RequestMapping("/api/order")

@GetMapping("/order-details/{orderItemId}") // Endpoint to fetch a single order item with delivery details
    public ResponseEntity<OrderItemDetailResponseDTO> getOrderItemWithDetails(@PathVariable Integer orderItemId) {
        OrderItemDetailResponseDTO orderItemDetailResponseDTO = orderService.getOrderItemWithDetails(orderItemId); // Use the new service method
        if (orderItemDetailResponseDTO != null) {
            return new ResponseEntity<>(orderItemDetailResponseDTO, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); // Or handle not found case as needed
        }
    }






// order-status-bar.component.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-order-status-bar',
  templateUrl: './order-status-bar.component.html',
  styleUrls: ['./order-status-bar.component.css']
})
export class OrderStatusBarComponent {
  @Input() status: string = '';
}

// order-status-bar.component.html
<div class="status-bar">
  <div class="step completed">Ordered<br><span>Oct 24</span></div>
  <div class="step completed">Shipped<br><span>Oct 30</span></div>
  <div class="step completed">Delivered<br><span>Nov 01</span></div>
</div>

// order-status-bar.component.css
.status-bar {
  display: flex;
  justify-content: space-between;
  background: #f5f5f5;
  padding: 10px;
  border-radius: 5px;
}
.step {
  text-align: center;
}
.completed {
  color: blue;
}

// order-summary.component.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-order-summary',
  templateUrl: './order-summary.component.html',
  styleUrls: ['./order-summary.component.css']
})
export class OrderSummaryComponent {
  @Input() order: any;
}

// order-summary.component.html
<div class="order-summary">
  <div><strong>Ordered:</strong> {{ order.date }}</div>
  <div><strong>Order number:</strong> {{ order.orderNumber }}</div>
  <div><strong>Ordered from:</strong> {{ order.seller }}</div>
  <div><strong>Shipping address:</strong> {{ order.shippingAddress }}</div>
  <div><strong>Payment method:</strong> {{ order.paymentMethod }}</div>
  <div><strong>Shipping:</strong> {{ order.shipping }}</div>
  <div><strong>Discount:</strong> {{ order.discount }}</div>
  <div><strong>Total:</strong> {{ order.total }}</div>
</div>

// order-details.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent {
  order = {
    date: 'Oct 24, 2019',
    orderNumber: 'SMLS-6500-5000-0050',
    seller: 'Google LLC, 1600 Amphitheatre Parkway, Mountain View, CA',
    shippingAddress: 'Smiles Davis, 600 Montgomery St, CA 94111',
    paymentMethod: 'Visa **** 6500',
    shipping: '$0.00',
    discount: '- $49.00',
    total: '$0.00',
  };
}

// order-details.component.html
<div class="order-details">
  <p>Your shipment was just dropped off. Go on. Open it and enjoy.</p>
  <app-order-status-bar [status]="'delivered'"></app-order-status-bar>
  <app-order-summary [order]="order"></app-order-summary>
</div>

// order-details.component.css
.order-details {
  padding: 20px;
  background: white;
  border-radius: 5px;
}























import { Component, OnInit } from '@angular/core';
import { OrderService } from '../../services/order.service';
import { OrderItemDetailResponseDTO } from '../../models/order-item-detail-response-dto';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent implements OnInit {

  orderItemDetailResponse$!: Observable<OrderItemDetailResponseDTO>; // Using Observable
  orderItemId: number = 12345; // Example orderItemId (replace with dynamic value if needed)

  constructor(private orderService: OrderService) {}

  ngOnInit(): void {
    this.loadOrderItemDetails(this.orderItemId);
  }

  loadOrderItemDetails(orderItemId: number): void {
    this.orderItemDetailResponse$ = this.orderService.getOrderItemDetails(orderItemId);
  }

  formatDate(dateString?: string | number): string {
    if (!dateString) return 'N/A';
    let date: Date = typeof dateString === 'number' ? new Date(dateString) : new Date(dateString);
    return date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
  }

  formatTime(dateString?: string): string {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', hour12: true });
  }
}


<div class="container mt-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <p class="mb-1">Your shipment was just dropped off. Go on. Open it and enjoy.</p>

                    <div class="d-flex justify-content-around mb-4 mt-3">
                        <div>
                            <div class="text-center">Ordered</div>
                            <div class="text-center">{{ (orderItemDetailResponse$ | async)?.createdAt ? formatDate((orderItemDetailResponse$ | async)?.createdAt) : 'N/A' }}</div>
                        </div>
                        <div>
                            <div class="text-center">Shipped</div>
                            <div class="text-center">{{ (orderItemDetailResponse$ | async)?.deliveryDate ? formatDate((orderItemDetailResponse$ | async)?.deliveryDate) : 'N/A' }}</div>
                        </div>
                        <div>
                            <div class="text-center">Delivered</div>
                            <div class="text-center">{{ (orderItemDetailResponse$ | async)?.deliveryDate ? formatDate((orderItemDetailResponse$ | async)?.deliveryDate) : 'N/A' }}</div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-around align-items-center mb-4">
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary" *ngIf="(orderItemDetailResponse$ | async)?.orderStatus === 'Ordered'">&#10004;</span>
                            <span class="badge rounded-pill bg-light border" *ngIf="(orderItemDetailResponse$ | async)?.orderStatus !== 'Ordered'">&#10004;</span>
                        </div>
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary" *ngIf="(orderItemDetailResponse$ | async)?.orderStatus === 'Shipped'">&#10004;</span>
                            <span class="badge rounded-pill bg-light border" *ngIf="(orderItemDetailResponse$ | async)?.orderStatus !== 'Shipped'">&#10004;</span>
                        </div>
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary">&#10004;</span>
                        </div>
                    </div>

                    <hr class="mb-3">

                    <div class="row mb-3">
                        <div class="col-md-8 d-flex align-items-center">
                            <img [src]="'https://m.media-amazon.com/images/I/711fYUFXhcL._SL1500_.jpg'" 
                                 alt="{{ (orderItemDetailResponse$ | async)?.productName }}" 
                                 style="max-height: 80px; margin-right: 15px;">
                            <div>
                                <h6 class="mb-0">{{ (orderItemDetailResponse$ | async)?.productName || 'N/A' }}</h6>
                                <small class="text-muted">ID number {{ (orderItemDetailResponse$ | async)?.productId || 'N/A' }}</small>
                            </div>
                        </div>
                        <div class="col-md-4 text-md-end">
                            <h6 class="mb-0">${{ (orderItemDetailResponse$ | async)?.productPrice?.toFixed(2) || '0.00' }}</h6>
                            <small class="text-muted">Quantity: {{ (orderItemDetailResponse$ | async)?.quantity || 'N/A' }}</small>
                        </div>
                    </div>

                    <div class="mb-3">
                        <button class="btn btn-outline-primary btn-sm">Track Shipment</button>
                    </div>

                    <hr class="mb-3">

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p class="mb-1"><b>Ordered</b></p>
                            <p class="mb-0">{{ formatDate((orderItemDetailResponse$ | async)?.createdAt) }}, {{ formatTime((orderItemDetailResponse$ | async)?.createdAt) }}</p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1"><b>Order number</b></p>
                            <p class="mb-0">{{ (orderItemDetailResponse$ | async)?.orderItemId || 'N/A' }}</p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p class="mb-1"><b>Ordered from</b></p>
                            <p class="mb-0">{{ (orderItemDetailResponse$ | async)?.deliveryAddress?.country || 'N/A' }}</p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1"><b>Shipping address</b></p>
                            <p class="mb-0">{{ (orderItemDetailResponse$ | async)?.deliveryAddress?.street || 'N/A' }}</p>
                            <p class="mb-0">{{ (orderItemDetailResponse$ | async)?.deliveryAddress?.city || 'N/A' }}, 
                                           {{ (orderItemDetailResponse$ | async)?.deliveryAddress?.state || 'N/A' }} 
                                           {{ (orderItemDetailResponse$ | async)?.deliveryAddress?.postalCode || 'N/A' }}</p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6 text-md-end">
                            <p class="mb-1"><b>Shipping</b> <span class="float-end">{{ (orderItemDetailResponse$ | async)?.highlightShippingFee | currency:'USD':'symbol':'1.2-2' }}</span></p>
                            <p class="mb-1"><b>Discount</b> <span class="float-end">{{ (orderItemDetailResponse$ | async)?.discount | currency:'USD':'symbol':'1.2-2' }}</span></p>
                            <p class="mb-1"><b>Total</b> <span class="float-end">${{ (orderItemDetailResponse$ | async)?.totalPrice?.toFixed(2) || '0.00' }}</span></p>
                        </div>
                    </div>

                    <hr>
                </div>
            </div>
        </div>
    </div>
</div>


















core.mjs:20762 Angular is running in development mode.
main.ts:4  ERROR TypeError: Cannot read properties of undefined (reading 'totalPrice')
    at OrderDetailsComponent_Template (order-details.component.html:97:82)
    at executeTemplate (core.mjs:12159:5)
    at refreshView (core.mjs:13732:7)
    at detectChangesInView (core.mjs:13941:5)
    at detectChangesInViewIfAttached (core.mjs:13903:3)
    at detectChangesInComponent (core.mjs:13892:3)
    at detectChangesInChildComponents (core.mjs:13954:5)
    at refreshView (core.mjs:13785:7)
    at detectChangesInView (core.mjs:13941:5)
    at detectChangesInViewIfAttached (core.mjs:13903:3)
handleError @ core.mjs:6673
(anonymous) @ core.mjs:6687
invoke @ zone.js:369
run @ zone.js:111
runOutsideAngular @ core.mjs:6421
(anonymous) @ core.mjs:6687
_tick @ core.mjs:22973
tick @ core.mjs:22944
(anonymous) @ core.mjs:34111
invoke @ zone.js:369
onInvoke @ core.mjs:6525
invoke @ zone.js:368
run @ zone.js:111
run @ core.mjs:6377
next @ core.mjs:34110
ConsumerObserver2.next @ Subscriber.js:90
Subscriber2._next @ Subscriber.js:59
Subscriber2.next @ Subscriber.js:32
(anonymous) @ Subject.js:41
errorContext @ errorContext.js:23
Subject2.next @ Subject.js:31
emit @ core.mjs:6064
checkStable @ core.mjs:6444
onHasTask @ core.mjs:6551
hasTask @ zone.js:422
_updateTaskCount @ zone.js:443
_updateTaskCount @ zone.js:264
runTask @ zone.js:177
drainMicroTaskQueue @ zone.js:581
Promise.then
nativeScheduleMicroTask @ zone.js:557
scheduleMicroTask @ zone.js:568
scheduleTask @ zone.js:391
scheduleTask @ zone.js:205
scheduleMicroTask @ zone.js:225
scheduleResolveOrReject @ zone.js:2528
then @ zone.js:2733
bootstrapModule @ core.mjs:35202
(anonymous) @ main.ts:4
[NEW] Explain Console errors by using Copilot in Edge: click
         
         to explain an error. 
        Learn more
        Don't show again
main.ts:4  ERROR TypeError: Cannot read properties of undefined (reading 'totalPrice')
    at OrderDetailsComponent_Template (order-details.component.html:97:82)
    at executeTemplate (core.mjs:12159:5)
    at refreshView (core.mjs:13732:7)
    at detectChangesInView (core.mjs:13941:5)
    at detectChangesInViewIfAttached (core.mjs:13903:3)
    at detectChangesInComponent (core.mjs:13892:3)
    at detectChangesInChildComponents (core.mjs:13954:5)
    at refreshView (core.mjs:13785:7)
    at detectChangesInView (core.mjs:13941:5)
    at detectChangesInViewIfAttached (core.mjs:13903:3)











Argument of type 'number' is not assignable to parameter of type 'string'.ts(2345)
(parameter) orderItemId: number
    this.orderItemDetailResponse$ = this.orderService.getOrderItemDetails(orderItemId);


import { Component, OnInit } from '@angular/core';
import { OrderService } from '../../services/order.service';
import { OrderItemDetailResponseDTO } from '../../models/order-item-detail-response-dto';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent implements OnInit {
  
  orderItemDetailResponse$!: Observable<OrderItemDetailResponseDTO>; // Using Observable
  orderItemId: number = 12345; // Hardcoded Order Item ID as a number

  constructor(private orderService: OrderService) {}

  ngOnInit(): void {
    this.loadOrderItemDetails(this.orderItemId);
  }

  loadOrderItemDetails(orderItemId: number): void {
    this.orderItemDetailResponse$ = this.orderService.getOrderItemDetails(orderItemId);
  }

  formatDate(dateString: string | number | undefined): string {
    if (!dateString) return '';
    let date: Date;
    if (typeof dateString === 'number') {
      date = new Date(dateString);
    } else {
      date = new Date(dateString);
    }
    const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'short', day: 'numeric' };
    return date.toLocaleDateString(undefined, options);
  }

  formatTime(dateString: string | undefined): string {
    if (!dateString) return '';
    const date = new Date(dateString);
    const options: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };
    return date.toLocaleTimeString(undefined, options);
  }
}



NG9: Property 'createdAt' does not exist on type 'Observable<OrderItemDetailResponseDTO>'.
src/app/components/order-details/order-details.component.html:11:92



export interface OrderItemDetailResponseDTO {
    orderId: number;
    orderItemId: number;
    productId: number;
    productName: string;
    quantity: number;
    productPrice: number;
    discount: number;
    image: string;
    totalPrice: number;
    deliveryAddress: Address;
    deliveryDate: number;
    orderStatus: string;
    highlightShippingFee: number;
    createdAt: string;
}

export interface Address {
    addressId: number;
    street: string;
    city: string;
    state: string;
    postalCode: string;
    country: string;
  }



<div class="container mt-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <p class="mb-1">Your shipment was just dropped off. Go on. Open it and enjoy.</p>

                    <div class="d-flex justify-content-around mb-4 mt-3">
                        <div>
                            <div class="text-center">Ordered</div>
                            <div class="text-center">{{ formatDate(orderItemDetailResponse?.createdAt) }}</div>
                        </div>
                        <div>
                            <div class="text-center">Shipped</div>
                            <div class="text-center">{{ formatDate(orderItemDetailResponse?.deliveryDate) }}</div>
                        </div>
                        <div>
                            <div class="text-center">Delivered</div>
                            <div class="text-center">{{ formatDate(orderItemDetailResponse?.deliveryDate) }}</div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-around align-items-center mb-4">
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary" *ngIf="orderItemDetailResponse?.orderStatus === 'Ordered'">&#10004;</span>
                            <span class="badge rounded-pill bg-light border" *ngIf="orderItemDetailResponse?.orderStatus !== 'Ordered'">&#10004;</span>
                        </div>
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary" *ngIf="orderItemDetailResponse?.orderStatus !== 'Ordered' && orderItemDetailResponse?.orderStatus !== 'Shipped'">&#10004;</span>
                            <span class="badge rounded-pill bg-primary" *ngIf="orderItemDetailResponse?.orderStatus === 'Shipped'">&#10004;</span>
                            <span class="badge rounded-pill bg-light border" *ngIf="orderItemDetailResponse?.orderStatus === 'Ordered'">&#10004;</span>
                        </div>
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary">&#10004;</span>
                        </div>
                    </div>

                    <hr class="mb-3">

                    <div class="row mb-3">
                        <div class="col-md-8 d-flex align-items-center">
                            <img [src]="'https://m.media-amazon.com/images/I/711fYUFXhcL._SL1500_.jpg'" alt="{{ orderItemDetailResponse?.productName }}" style="max-height: 80px; margin-right: 15px;">
                            <div>
                                <h6 class="mb-0">{{ orderItemDetailResponse?.productName }}</h6>
                                <small class="text-muted">ID number {{ orderItemDetailResponse?.productId }}</small>
                                <small class="text-muted">{{ orderItemDetailResponse?.productId }}</small>
                            </div>
                        </div>
                        <div class="col-md-4 text-md-end">
                            <h6 class="mb-0">${{ orderItemDetailResponse?.productPrice?.toFixed(2) }}</h6>
                            <small class="text-muted">Quantity: {{ orderItemDetailResponse?.quantity }}</small>
                        </div>
                    </div>

                    <div class="mb-3">
                        <button class="btn btn-outline-primary btn-sm">Track Shipment</button>
                    </div>

                    <hr class="mb-3">

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p class="mb-1"><b>Ordered</b></p>
                            <p class="mb-0">{{ formatDate(orderItemDetailResponse?.createdAt) }}, {{ formatTime(orderItemDetailResponse?.createdAt) }}</p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1"><b>Order number</b></p>
                            <p class="mb-0">{{ orderItemDetailResponse?.orderItemId }}</p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p class="mb-1"><b>Ordered from</b></p>
                            <div *ngIf="orderItemDetailResponse?.deliveryAddress">
                              <p class="mb-0">{{ orderItemDetailResponse?.deliveryAddress?.country }}</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1"><b>Shipping address</b></p>
                            <div *ngIf="orderItemDetailResponse?.deliveryAddress">
                              <p class="mb-0">{{ orderItemDetailResponse.deliveryAddress.street }}</p>
                              <p class="mb-0">{{ orderItemDetailResponse.deliveryAddress.city }}, {{ orderItemDetailResponse.deliveryAddress.state }} {{ orderItemDetailResponse.deliveryAddress.postalCode }}</p>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p class="mb-1"><b>Payment method</b></p>
                            <p class="mb-0">Visa **** 6500</p>
                         </div>
                        <div class="col-md-6 text-md-end">
                            <p class="mb-1"><b>Shipping</b> <span class="float-end">{{ orderItemDetailResponse?.highlightShippingFee | currency:'USD':'symbol':'1.2-2' }}</span></p>
                            <p class="mb-1"><b>Discount</b> <span class="float-end">{{ orderItemDetailResponse?.discount | currency:'USD':'symbol':'1.2-2' }}</span></p>
                            <p class="mb-1"><b>Tax</b> <span class="float-end">$0.00</span></p>
                            <p class="mb-1"><b>Total</b> <span class="float-end">${{ (orderItemDetailResponse.totalPrice) }}</span></p>
                        </div>
                    </div>

                    <hr>
                </div>
            </div>
        </div>
    </div>
</div>











import { Component, OnInit } from '@angular/core';
import { OrderService } from '../../services/order.service';
import { OrderItemDetailResponseDTO } from '../../models/order-item-detail-response-dto';
import { OrderItem } from '../../models/order-item';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-order-details',
  standalone: false,
  templateUrl: './order-details.component.html',
  styleUrl: './order-details.component.css'
})
export class OrderDetailsComponent implements OnInit {

  orderItemDetailResponse!: OrderItemDetailResponseDTO;
  orderItem!: OrderItem;
  orderItemId!: string | null;
  orderNumber: string = 'SMLS.6500-5000-0050'; // Static order number - consider making dynamic

  constructor(
    private orderService: OrderService,
    private route: ActivatedRoute
  ) { }

  ngOnInit(): void {
    this.orderItemId = this.route.snapshot.paramMap.get('orderItemId');

    if (this.orderItemId) {
      this.loadOrderItemDetails(this.orderItemId);
    } else {
      console.error('Order Item ID is missing in the route.');
    }
  }

  loadOrderItemDetails(orderItemId: string): void {
    this.orderService.getOrderItemDetails(orderItemId).subscribe(
      data => {
        this.orderItemDetailResponse = data;
        console.log('Order Item Detail Response:', this.orderItemDetailResponse);
      },
      error => {
        console.error('Error fetching order item details:', error);
      }
    );
  }

   formatDate(dateString: string | number | undefined): string { // Modified formatDate
    if (!dateString) return '';
    let date: Date;
    if (typeof dateString === 'number') {
      date = new Date(dateString); // Treat number as timestamp
    } else {
      date = new Date(dateString); // Treat string as date string
    }
    const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'short', day: 'numeric' };
    return date.toLocaleDateString(undefined, options);
  }

  formatTime(dateString: string | undefined): string {
    if (!dateString) return '';
    const date = new Date(dateString);
    const options: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };
    return date.toLocaleTimeString(undefined, options);
  }
}


<div class="container mt-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <p class="mb-1">Your shipment was just dropped off. Go on. Open it and enjoy.</p>

                    <div class="d-flex justify-content-around mb-4 mt-3">
                        <div>
                            <div class="text-center">Ordered</div>
                            <div class="text-center">{{ formatDate(orderItemDetailResponse?.createdAt) }}</div>
                        </div>
                        <div>
                            <div class="text-center">Shipped</div>
                            <div class="text-center">{{ formatDate(orderItemDetailResponse?.deliveryDate) }}</div>
                        </div>
                        <div>
                            <div class="text-center">Delivered</div>
                            <div class="text-center">{{ formatDate(orderItemDetailResponse?.deliveryDate) }}</div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-around align-items-center mb-4">
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary" *ngIf="orderItemDetailResponse?.orderStatus === 'Ordered'">&#10004;</span>
                            <span class="badge rounded-pill bg-light border" *ngIf="orderItemDetailResponse?.orderStatus !== 'Ordered'">&#10004;</span>
                        </div>
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary" *ngIf="orderItemDetailResponse?.orderStatus !== 'Ordered' && orderItemDetailResponse?.orderStatus !== 'Shipped'">&#10004;</span>
                            <span class="badge rounded-pill bg-primary" *ngIf="orderItemDetailResponse?.orderStatus === 'Shipped'">&#10004;</span>
                            <span class="badge rounded-pill bg-light border" *ngIf="orderItemDetailResponse?.orderStatus === 'Ordered'">&#10004;</span>
                        </div>
                        <div class="text-center">
                            <span class="badge rounded-pill bg-primary">&#10004;</span>
                        </div>
                    </div>

                    <hr class="mb-3">

                    <div class="row mb-3">
                        <div class="col-md-8 d-flex align-items-center">
                            <img [src]="orderItemDetailResponse?.image" alt="{{ orderItemDetailResponse?.productName }}" style="max-height: 80px; margin-right: 15px;">
                            <div>
                                <h6 class="mb-0">{{ orderItemDetailResponse?.productName }}</h6>
                                <small class="text-muted">ID number {{ orderItemDetailResponse?.productId }}</small>
                                <small class="text-muted">{{ orderItemDetailResponse?.productId }}</small>
                            </div>
                        </div>
                        <div class="col-md-4 text-md-end">
                            <h6 class="mb-0">${{ orderItemDetailResponse?.productPrice?.toFixed(2) }}</h6>
                            <small class="text-muted">Quantity: {{ orderItemDetailResponse?.quantity }}</small>
                        </div>
                    </div>

                    <div class="mb-3">
                        <button class="btn btn-outline-primary btn-sm">Track Shipment</button>
                    </div>

                    <hr class="mb-3">

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p class="mb-1"><b>Ordered</b></p>
                            <p class="mb-0">{{ formatDate(orderItemDetailResponse?.createdAt) }}, {{ formatTime(orderItemDetailResponse?.createdAt) }}</p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1"><b>Order number</b></p>
                            <p class="mb-0">{{ orderItemDetailResponse?.orderItemId }}</p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p class="mb-1"><b>Ordered from</b></p>
                            <div *ngIf="orderItemDetailResponse?.deliveryAddress">
                              <p class="mb-0">{{ orderItemDetailResponse?.deliveryAddress?.country }}</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1"><b>Shipping address</b></p>
                            <div *ngIf="orderItemDetailResponse?.deliveryAddress">
                              <p class="mb-0">{{ orderItemDetailResponse.deliveryAddress.street }}</p>
                              <p class="mb-0">{{ orderItemDetailResponse.deliveryAddress.city }}, {{ orderItemDetailResponse.deliveryAddress.state }} {{ orderItemDetailResponse.deliveryAddress.postalCode }}</p>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p class="mb-1"><b>Payment method</b></p>
                            <p class="mb-0">Visa **** 6500</p>
                         </div>
                        <div class="col-md-6 text-md-end">
                            <p class="mb-1"><b>Shipping</b> <span class="float-end">{{ orderItemDetailResponse?.highlightShippingFee | currency:'USD':'symbol':'1.2-2' }}</span></p>
                            <p class="mb-1"><b>Discount</b> <span class="float-end">{{ orderItemDetailResponse?.discount | currency:'USD':'symbol':'1.2-2' }}</span></p>
                            <p class="mb-1"><b>Tax</b> <span class="float-end">$0.00</span></p>
                            <p class="mb-1"><b>Total</b> <span class="float-end">${{ (orderItemDetailResponse.totalPrice) }}</span></p>
                        </div>
                    </div>

                    <hr>
                </div>
            </div>
        </div>
    </div>
</div>
/* src/app/components/order-details/order-details.component.css */
.badge.rounded-pill.bg-light.border {
  background-color: #f8f9fa !important; /* To match light gray background */
}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrderItemDetailResponseDTO } from '../models/order-item-detail-response-dto';

@Injectable({
  providedIn: 'root'
})
export class OrderService {

  private apiUrl = 'http://localhost:8766/api/order/'; 

  constructor(private http: HttpClient) { }

  getOrderItemDetails(orderItemId: string): Observable<OrderItemDetailResponseDTO> {
    return this.http.get<OrderItemDetailResponseDTO>(`${this.apiUrl}/order-details/1`);
  }
}
order-details.component.ts:31 
 Order Item ID is missing in the route.
main.ts:4 
 ERROR TypeError: Cannot read properties of undefined (reading 'totalPrice')
    at OrderDetailsComponent_Template (order-details.component.html:97:82)
Promise.then		
(anonymous)	@	main.ts:4


























order-details.component.ts:27  Order Item ID is missing from the URL.



19:1  Access to XMLHttpRequest at 'http://localhost:8766/api/order/item-detail/19' from origin 'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
order-details.component.ts:42  Failed to fetch order details: HttpErrorResponse {headers: _HttpHeaders, status: 0, statusText: 'Unknown Error', url: 'http://localhost:8766/api/order/item-detail/19', ok: false, …}
error @ order-details.component.ts:42
ConsumerObserver2.error @ Subscriber.js:100
Subscriber2._error @ Subscriber.js:63
Subscriber2.error @ Subscriber.js:40
Subscriber2._error @ Subscriber.js:63
Subscriber2.error @ Subscriber.js:40
Subscriber2._error @ Subscriber.js:63
Subscriber2.error @ Subscriber.js:40
Subscriber2._error @ Subscriber.js:63
Subscriber2.error @ Subscriber.js:40
Subscriber2._error @ Subscriber.js:63
Subscriber2.error @ Subscriber.js:40
onError @ http.mjs:2438
invokeTask @ zone.js:402
(anonymous) @ core.mjs:6194
onInvokeTask @ core.mjs:6194
invokeTask @ zone.js:401
onInvokeTask @ core.mjs:6514
invokeTask @ zone.js:401
runTask @ zone.js:159
invokeTask @ zone.js:483
invokeTask @ zone.js:1138
globalCallback @ zone.js:1169
globalZoneAwareCallback @ zone.js:1202
Zone - XMLHttpRequest.addEventListener:error
onScheduleTask @ core.mjs:6188
scheduleTask @ zone.js:382
onScheduleTask @ zone.js:271
scheduleTask @ zone.js:382
scheduleTask @ zone.js:205
scheduleEventTask @ zone.js:231
(anonymous) @ zone.js:1499
(anonymous) @ http.mjs:2491
Observable2._trySubscribe @ Observable.js:33
(anonymous) @ Observable.js:27
errorContext @ errorContext.js:23
Observable2.subscribe @ Observable.js:23
(anonymous) @ switchMap.js:16
OperatorSubscriber2._this._next @ OperatorSubscriber.js:14
Subscriber2.next @ Subscriber.js:32
(anonymous) @ innerFrom.js:51
Observable2._trySubscribe @ Observable.js:33
(anonymous) @ Observable.js:27
errorContext @ errorContext.js:23
Observable2.subscribe @ Observable.js:23
(anonymous) @ switchMap.js:12
(anonymous) @ lift.js:10
(anonymous) @ Observable.js:27
errorContext @ errorContext.js:23
Observable2.subscribe @ Observable.js:23
(anonymous) @ finalize.js:5
(anonymous) @ lift.js:10
(anonymous) @ Observable.js:27
errorContext @ errorContext.js:23
Observable2.subscribe @ Observable.js:23
doInnerSub @ mergeInternals.js:21
outerNext @ mergeInternals.js:15
OperatorSubscriber2._this._next @ OperatorSubscriber.js:14
Subscriber2.next @ Subscriber.js:32
(anonymous) @ innerFrom.js:51
Observable2._trySubscribe @ Observable.js:33
(anonymous) @ Observable.js:27
errorContext @ errorContext.js:23
Observable2.subscribe @ Observable.js:23
mergeInternals @ mergeInternals.js:54
(anonymous) @ mergeMap.js:20
(anonymous) @ lift.js:10
(anonymous) @ Observable.js:27
errorContext @ errorContext.js:23
Observable2.subscribe @ Observable.js:23
(anonymous) @ filter.js:6
(anonymous) @ lift.js:10
(anonymous) @ Observable.js:27
errorContext @ errorContext.js:23
Observable2.subscribe @ Observable.js:23
(anonymous) @ map.js:6
(anonymous) @ lift.js:10
(anonymous) @ Observable.js:27
errorContext @ errorContext.js:23
Observable2.subscribe @ Observable.js:23
fetchOrderDetails @ order-details.component.ts:33
ngOnInit @ order-details.component.ts:21
callHookInternal @ core.mjs:4195
callHook @ core.mjs:4219
callHooks @ core.mjs:4179
executeInitAndCheckHooks @ core.mjs:4134
refreshView @ core.mjs:13746
detectChangesInView @ core.mjs:13941
detectChangesInViewIfAttached @ core.mjs:13903
detectChangesInComponent @ core.mjs:13892
detectChangesInChildComponents @ core.mjs:13954
refreshView @ core.mjs:13785
detectChangesInView @ core.mjs:13941
detectChangesInViewWhileDirty @ core.mjs:13652
detectChangesInternal @ core.mjs:13636
detectChangesInViewIfRequired @ core.mjs:23201
synchronizeOnce @ core.mjs:23028
synchronize @ core.mjs:22995
_tick @ core.mjs:22965
tick @ core.mjs:22944
_loadComponent @ core.mjs:23104
bootstrap @ core.mjs:22923
(anonymous) @ core.mjs:35110
moduleDoBootstrap @ core.mjs:35110
(anonymous) @ core.mjs:35100
invoke @ zone.js:369
onInvoke @ core.mjs:6525
invoke @ zone.js:368
run @ zone.js:111
(anonymous) @ zone.js:2538
invokeTask @ zone.js:402
(anonymous) @ core.mjs:6194
onInvokeTask @ core.mjs:6194
invokeTask @ zone.js:401
onInvokeTask @ core.mjs:6514
invokeTask @ zone.js:401
runTask @ zone.js:159
drainMicroTaskQueue @ zone.js:581
Zone - Promise.then
onScheduleTask @ core.mjs:6188
scheduleTask @ zone.js:382
onScheduleTask @ zone.js:271
scheduleTask @ zone.js:382
scheduleTask @ zone.js:205
scheduleMicroTask @ zone.js:225
scheduleResolveOrReject @ zone.js:2528
then @ zone.js:2733
(anonymous) @ core.mjs:35077
_callAndReportToErrorHandler @ core.mjs:35120
(anonymous) @ core.mjs:35074
invoke @ zone.js:369
onInvoke @ core.mjs:6525
invoke @ zone.js:368
run @ zone.js:111
run @ core.mjs:6377
bootstrap @ core.mjs:35030
bootstrapModuleFactory @ core.mjs:35178
(anonymous) @ core.mjs:35202
invoke @ zone.js:369
run @ zone.js:111
(anonymous) @ zone.js:2538
invokeTask @ zone.js:402
runTask @ zone.js:159
drainMicroTaskQueue @ zone.js:581
Promise.then
nativeScheduleMicroTask @ zone.js:557
scheduleMicroTask @ zone.js:568
scheduleTask @ zone.js:391
scheduleTask @ zone.js:205
scheduleMicroTask @ zone.js:225
scheduleResolveOrReject @ zone.js:2528
then @ zone.js:2733
bootstrapModule @ core.mjs:35202
(anonymous) @ main.ts:4
order-details.component.ts:33 
            
            
            GET http://localhost:8766/api/order/item-detail/19 net::ERR_FAILED 404 (Not Found)
PS C:\JAVA\order-details\src\app\models> ng serve
Node.js version v23.1.0 detected.
Odd numbered Node.js versions will not enter LTS status and should not be used for production. For more information, please see https://nodejs.org/en/about/previous-releases/.
Component HMR has been enabled.
If you encounter application reload issues, you can manually reload the page to bypass HMR and/or disable this feature with the `--no-hmr` command line option.
Please consider reporting any issues you encounter here: https://github.com/angular/angular-cli/issues  

Application bundle generation failed. [3.084 seconds]

X [ERROR] NG9: Property 'orderId' does not exist on type 'OrderItemDetailResponseDTO'. [plugin angular-compiler]

    src/app/components/order-details/order-details.component.html:16:62:
      16 │ ...      <p><strong>Order ID:</strong> {{ orderDetails.orderId }}</p>
         ╵                                          
              ~~~~~~~

  Error occurs in the template of component OrderDetailsComponent.

    src/app/components/order-details/order-details.component.ts:9:15:
      9 │   templateUrl: './order-details.component.html',
        ╵                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Watch mode enabled. Watching for file changes...
Application bundle generation failed. [0.433 seconds]

X [ERROR] NG9: Property 'orderId' does not exist on type 'OrderItemDetailResponseDTO'. [plugin angular-compiler]

    src/app/components/order-details/order-details.component.html:16:62:
      16 │ ...      <p><strong>Order ID:</strong> {{ orderDetails.orderId }}</p>
         ╵                                          
              ~~~~~~~

  Error occurs in the template of component OrderDetailsComponent.

    src/app/components/order-details/order-details.component.ts:9:15:
      9 │   templateUrl: './order-details.component.html',
        ╵                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





















import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { OrderService } from '../../services/order.service';
import { OrderItemDetailResponseDTO } from '../../models/order-item-detail-response-dto';

@Component({
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent implements OnInit {
  orderItemId!: number; // Definite assignment assertion
  orderDetails!: OrderItemDetailResponseDTO; // Definite assignment assertion

  constructor(private route: ActivatedRoute, private orderService: OrderService) { }

  ngOnInit(): void {
    // Safely get the orderItemId from the route
    const orderItemIdParam = this.route.snapshot.paramMap.get('orderItemId');
    
    // Check if orderItemIdParam is not null
    if (orderItemIdParam !== null) {
      this.orderItemId = +orderItemIdParam; // Convert to number
      this.fetchOrderDetails(this.orderItemId);
    } else {
      console.error('Order Item ID is missing from the URL.');
      // Handle the case where orderItemId is missing (e.g., redirect or show an error message)
    }
  }

  private fetchOrderDetails(orderItemId: number): void {
    this.orderService.getOrderItemDetails(orderItemId).subscribe({
      next: (data) => {
        this.orderDetails = data;
        // Ensure the image URL is correct (if stored as a relative path, prepend the base URL)
        if (this.orderDetails.image && !this.orderDetails.image.startsWith('http')) {
          this.orderDetails.image = `http://your-backend-base-url/${this.orderDetails.image}`;
        }
      },
      error: (err) => {
        console.error('Failed to fetch order details:', err);
        // Handle the error (e.g., show a user-friendly message)
      }
    });
  }
}















Property 'orderItemId' has no initializer and is not definitely assigned in the constructor.ts(2564)
(property) OrderDetailsComponent.orderItemId: number


Property 'orderDetails' has no initializer and is not definitely assigned in the constructor.ts(2564)
(property) OrderDetailsComponent.orderDetails: OrderItemDetailResponseDTO








import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrderItemDetailResponseDTO } from '../models/order-item-detail-response-dto';

@Injectable({
  providedIn: 'root'
})
export class OrderService {
  private apiUrl = 'http://localhost:8766/api/order';

  constructor(private http: HttpClient) { }

  getOrderItemDetails(orderItemId: number): Observable<OrderItemDetailResponseDTO> {
    return this.http.get<OrderItemDetailResponseDTO>(`${this.apiUrl}/item-detail/${orderItemId}`);
  }
}




<div *ngIf="orderDetails" class="container mt-5">
  <div class="card">
    <div class="card-header bg-primary text-white">
      <h2 class="card-title">Order Details</h2>
    </div>
    <div class="card-body">
      <div class="row">
        <!-- Product Image -->
        <div class="col-md-4">
          <img [src]="orderDetails.image" alt="Product Image" class="img-fluid rounded" />
        </div>
        <!-- Order Details -->
        <div class="col-md-8">
          <div class="row mb-3">
            <div class="col-md-6">
              <p><strong>Order ID:</strong> {{ orderDetails.orderId }}</p>
              <p><strong>Product Name:</strong> {{ orderDetails.productName }}</p>
              <p><strong>Price:</strong> {{ orderDetails.price | currency }}</p>
              <p><strong>Quantity:</strong> {{ orderDetails.quantity }}</p>
            </div>
            <div class="col-md-6">
              <p><strong>Discount:</strong> {{ orderDetails.discount | currency }}</p>
              <p><strong>Total Price:</strong> {{ orderDetails.totalPrice | currency }}</p>
              <p><strong>Shipping Fee:</strong> {{ orderDetails.highlightShippingFee | currency }}</p>
              <p><strong>Order Status:</strong> <span class="badge bg-success">{{ orderDetails.orderStatus }}</span></p>
            </div>
          </div>
          <div class="row">
            <div class="col-md-12">
              <p><strong>Delivery Address:</strong></p>
              <p>{{ orderDetails.deliveryAddress.street }}, {{ orderDetails.deliveryAddress.city }}, {{ orderDetails.deliveryAddress.state }}, {{ orderDetails.deliveryAddress.postalCode }}, {{ orderDetails.deliveryAddress.country }}</p>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6">
              <p><strong>Delivery Date:</strong> {{ orderDetails.deliveryDate | date }}</p>
            </div>
            <div class="col-md-6">
              <p><strong>Order Created At:</strong> {{ orderDetails.createdAt | date:'medium' }}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div *ngIf="!orderDetails" class="container mt-5">
  <div class="text-center">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-2">Loading order details...</p>
  </div>
</div>



/* Custom styles for the order details page */
.card {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.img-fluid {
  max-height: 300px;
  object-fit: cover;
}

.badge {
  font-size: 1rem;
  padding: 0.5rem 1rem;
}


import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { OrderService } from '../../services/order.service';
import { OrderItemDetailResponseDTO } from '../../models/order-item-detail-response-dto';

@Component({
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css']
})
export class OrderDetailsComponent implements OnInit {
  orderItemId: number;
  orderDetails: OrderItemDetailResponseDTO;

  constructor(private route: ActivatedRoute, private orderService: OrderService) { }

  ngOnInit(): void {
    this.orderItemId = +this.route.snapshot.paramMap.get('orderItemId');
    this.orderService.getOrderItemDetails(this.orderItemId).subscribe(data => {
      this.orderDetails = data;
      // Ensure the image URL is correct (if stored as a relative path, prepend the base URL)
      if (this.orderDetails.image && !this.orderDetails.image.startsWith('http')) {
        this.orderDetails.image = `http://your-backend-base-url/${this.orderDetails.image}`;
      }
    });
  }
}

























get request: http://localhost:8766/api/order/item-detail/19
output sample:
{
    "orderId": 17,
    "orderItemId": 19,
    "productId": 9,
    "productName": "Product9",
    "price": 50.0,
    "quantity": 2,
    "discount": 50.0,
    "totalPrice": 100.0,
    "image": "image1i.jpg",
    "deliveryAddress": {
        "addressId": 15,
        "street": "1212 Hemlock St",
        "city": "Karur",
        "state": "TN",
        "postalCode": "600015",
        "country": "India"
    },
    "deliveryDate": "2025-03-08",
    "orderStatus": "DELIVERED",
    "highlightShippingFee": 13.0,
    "createdAt": "2025-02-21T05:05:35.000+00:00"
}

@Override
    public OrderItemDetailResponseDTO getOrderItemWithDetails(Integer orderItemId) {
        OrderItem orderItem = orderItemRepository.findByOrderItemId(orderItemId)
                .orElseThrow(() -> new OrderItemNotFoundException("Order Item not found with ID: " + orderItemId));
        Order order = orderItem.getOrder(); // Get the associated Order

        if (order == null) {
            return null;
        }

        OrderItemDetailResponseDTO responseDTO = new OrderItemDetailResponseDTO();
//        responseDTO.setOrderItem(convertToOrderItemDTO(orderItem));

        OrderDTO orderDTO = convertToDTO(order);
        responseDTO.setOrderId(orderDTO.getOrderId());
        responseDTO.setDeliveryAddress(orderDTO.getDeliveryAddress());
        responseDTO.setDeliveryDate(orderDTO.getDeliveryDate());
        responseDTO.setOrderStatus(order.getOrderStatus()); // Set orderStatus from Order

        OrderItemDTO orderItemDTO = convertToOrderItemDTO(orderItem);
        responseDTO.setOrderItemId(orderItemDTO.getOrderItemId());
        responseDTO.setProductId(orderItemDTO.getProductId());
        responseDTO.setQuantity(orderItemDTO.getQuantity());
        responseDTO.setTotalPrice(orderItemDTO.getTotalPrice());
        responseDTO.setTotalPrice(orderItemDTO.getTotalPrice());
        responseDTO.setCreatedAt(orderItemDTO.getCreatedAt());

        // Fetch product details from Product Service to get productName, discount, image, shipping fee
        ResponseEntity<ProductDTO> productResponse = productClient.getProductById(orderItem.getProductId());
        if (productResponse.hasBody()) {
            ProductDTO product = productResponse.getBody();
            responseDTO.setProductName(product.getName());
            responseDTO.setDiscount(product.getDiscount());
            responseDTO.setImage(product.getImage1());
            responseDTO.setPrice(product.getNewPrice());
            responseDTO.setHighlightShippingFee(product.getHighlightShippingFee());
        } else {
            responseDTO.setProductName("Unknown Product");
            responseDTO.setDiscount(0.0);
            responseDTO.setImage(null);
            responseDTO.setHighlightShippingFee(0.0);
        }

        return responseDTO;
    }

package com.genckart.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.sql.Timestamp;
import java.time.LocalDate;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class OrderItemDetailResponseDTO {
//    private OrderItemDTO orderItem;
    private Integer orderItemId;
    private Integer productId;
    private String productName;
    private Integer quantity;
    private Double productPrice;
    private Double discount;
    private String image;
    private Double totalPrice;
    private AddressDTO deliveryAddress;
    private LocalDate deliveryDate;
    private String orderStatus;
    private double highlightShippingFee;
    private Timestamp createdAt;
}
@Override
    public OrderItemDetailResponseDTO getOrderItemWithDetails(Integer orderItemId) {
        OrderItem orderItem = orderItemRepository.findByOrderItemId(orderItemId)
                .orElseThrow(() -> new OrderItemNotFoundException("Order Item not found with ID: " + orderItemId));
        Order order = orderItem.getOrder(); // Get the associated Order

        if (order == null) {
            return null;
        }

        OrderItemDetailResponseDTO responseDTO = new OrderItemDetailResponseDTO();
//        responseDTO.setOrderItem(convertToOrderItemDTO(orderItem));

        OrderDTO orderDTO = convertToDTO(order);
        responseDTO.setDeliveryAddress(orderDTO.getDeliveryAddress());
        responseDTO.setDeliveryDate(orderDTO.getDeliveryDate());
        responseDTO.setOrderStatus(order.getOrderStatus()); // Set orderStatus from Order

        OrderItemDTO orderItemDTO = convertToOrderItemDTO(orderItem);
        responseDTO.setOrderItemId(orderItemDTO.getOrderItemId());
        responseDTO.setProductId(orderItemDTO.getProductId());
        responseDTO.setQuantity(orderItemDTO.getQuantity());
        responseDTO.setProductPrice(orderItemDTO.getProductPrice());
        responseDTO.setTotalPrice(orderItem.getTotalPrice());
        responseDTO.setTotalPrice(orderItemDTO.getTotalPrice());
        responseDTO.setCreatedAt(orderItemDTO.getCreatedAt());

        // Fetch product details from Product Service to get productName, discount, image, shipping fee
        ResponseEntity<ProductDTO> productResponse = productClient.getProductById(orderItem.getProductId());
        if (productResponse.hasBody()) {
            ProductDTO product = productResponse.getBody();
            responseDTO.setProductName(product.getName());
            responseDTO.setDiscount(product.getDiscount());
            responseDTO.setImage(product.getImage1());
            responseDTO.setHighlightShippingFee(product.getHighlightShippingFee());
        } else {
            responseDTO.setProductName("Unknown Product");
            responseDTO.setDiscount(0.0);
            responseDTO.setImage(null);
            responseDTO.setHighlightShippingFee(0.0);
        }
        return responseDTO;
    }
@RequestMapping("/api/order")
 @GetMapping("/item-detail/{orderItemId}") // Endpoint to fetch a single order item with delivery details
    public ResponseEntity<OrderItemDetailResponseDTO> getOrderItemWithDetails(@PathVariable Integer orderItemId) {
        OrderItemDetailResponseDTO orderItemDetailResponseDTO = orderService.getOrderItemWithDetails(orderItemId); // Use the new service method
        if (orderItemDetailResponseDTO != null) {
            return new ResponseEntity<>(orderItemDetailResponseDTO, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); // Or handle not found case as needed
        }
    }



<div class="order-details-container">
  <h2>Order Details</h2>
  <div class="order-info">
    <p><strong>Order ID:</strong> {{ order.orderId }}</p>
    <p><strong>Order Date:</strong> {{ order.createdAt | date: 'yyyy-MM-dd' }}</p>
  </div>
  <div class="shipping-address">
    <h3>Shipping Address</h3>
    <p>
      {{ order.deliveryAddress.street }}, {{ order.deliveryAddress.city }},
      {{ order.deliveryAddress.state }}, {{ order.deliveryAddress.postalCode }},
      {{ order.deliveryAddress.country }}
    </p>
  </div>
  <div class="billing-details">
    <h3>Billing Details</h3>
    <div *ngFor="let item of order.orderItems" class="order-item">
      <div class="product-image">
        <img [src]="item.image" alt="{{ item.productName }}" />
      </div>
      <div class="item-details">
        <p><strong>Product Name:</strong> {{ item.productName }}</p>
        <p><strong>Order Item Number:</strong> {{ item.orderItemId }}</p>
        <p><strong>Quantity:</strong> {{ item.quantity }}</p>
        <p><strong>Price:</strong> ${{ item.productPrice }}</p>
        <p><strong>Discount:</strong> ${{ item.discount }}</p>
        <p><strong>Shipping Fee:</strong> ${{ item.highlightShippingFee }}</p>
      </div>
    </div>
  </div>
  <div class="status-bar">
    <app-order-status [orderStatus]="order.orderStatus"></app-order-status>
  </div>
</div>
















// order.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Order } from '../models/order';

@Injectable({
  providedIn: 'root',
})
export class OrderService {
  private baseUrl = 'http://localhost:8766/api/order'; // Base URL for order endpoints

  constructor(private http: HttpClient) {}

  // Fetch order history for a specific user
  getOrders(): Observable<Order[]> {
    return this.http.get<Order[]>(`${this.baseUrl}/history/1`);
  }

  // Fetch order details by orderId
  getOrderDetails(orderId: number): Observable<Order> {
    return this.http.get<Order>(`${this.baseUrl}/${orderId}`);
  }
}




// app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { OrderListComponent } from './components/order-list/order-list.component';
import { OrderDetailsComponent } from './components/order-details/order-details.component';

const routes: Routes = [
  { path: 'orders', component: OrderListComponent },
  { path: 'orders/:id', component: OrderDetailsComponent }, // Route for order details
  { path: '', redirectTo: '/orders', pathMatch: 'full' }, // Default route
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}




import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { OrderService } from '../../services/order.service';
import { Order } from '../../models/order';

@Component({
  selector: 'app-order-details',
  templateUrl: './order-details.component.html',
  styleUrls: ['./order-details.component.css'],
})
export class OrderDetailsComponent implements OnInit {
  order!: Order;

  constructor(
    private route: ActivatedRoute,
    private orderService: OrderService
  ) {}

  ngOnInit(): void {
    const orderId = this.route.snapshot.paramMap.get('id');
    if (orderId) {
      this.orderService.getOrderDetails(+orderId).subscribe((data) => {
        this.order = data;
      });
    }
  }
}






<div class="order-details-container">
  <h2>Order Details</h2>
  <div class="order-info">
    <p><strong>Order ID:</strong> {{ order.orderId }}</p>
    <p><strong>Order Date:</strong> {{ order.createdAt | date: 'yyyy-MM-dd' }}</p>
  </div>
  <div class="shipping-address">
    <h3>Shipping Address</h3>
    <p>
      {{ order.deliveryAddress.street }}, {{ order.deliveryAddress.city }},
      {{ order.deliveryAddress.state }}, {{ order.deliveryAddress.postalCode }},
      {{ order.deliveryAddress.country }}
    </p>
  </div>
  <div class="billing-details">
    <h3>Billing Details</h3>
    <div *ngFor="let item of order.orderItems">
      <p><strong>Product:</strong> {{ item.productName }}</p>
      <p><strong>Quantity:</strong> {{ item.quantity }}</p>
      <p><strong>Price:</strong> ${{ item.productPrice }}</p>
      <p><strong>Discount:</strong> ${{ item.discount }}</p>
      <p><strong>Shipping Fee:</strong> ${{ item.highlightShippingFee }}</p>
    </div>
  </div>
  <div class="status-bar">
    <app-order-status [orderStatus]="order.orderStatus"></app-order-status>
  </div>
</div>






.order-details-container {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

.order-info,
.shipping-address,
.billing-details {
  margin-bottom: 20px;
}

h2,
h3 {
  color: #333;
}

p {
  margin: 5px 0;
}

.status-bar {
  margin-top: 20px;
}



<!-- order-status.component.html -->
<div class="status-bar">
  <div class="status-step" [ngClass]="{'completed': orderStatus === 'ordered' || orderStatus === 'shipped' || orderStatus === 'delivered', 'cancelled': orderStatus === 'cancelled'}">
    <span class="status-icon">&#10003;</span>
    <span class="status-text">Ordered</span>
  </div>
  <div class="status-step" [ngClass]="{'completed': orderStatus === 'shipped' || orderStatus === 'delivered', 'cancelled': orderStatus === 'cancelled'}">
    <span class="status-icon">&#10003;</span>
    <span class="status-text">Shipped</span>
  </div>
  <div class="status-step" [ngClass]="{'completed': orderStatus === 'delivered', 'cancelled': orderStatus === 'cancelled'}">
    <span class="status-icon">&#10003;</span>
    <span class="status-text">Delivered</span>
  </div>
</div>













<!-- order-list.component.html -->
<div class="order-history-container">
  <h2>Order History</h2>
  <div class="filters">
    <!-- Filters here -->
  </div>
  <div *ngIf="!isAnyFilterEmpty(); else emptyStateTemplate">
    <div *ngFor="let order of filteredOrders" class="order-card">
      <div class="order-header">
        <p><strong>Order: #{{ order.orderId }}</strong></p>
        <p>Order Date: {{ order.createdAt | date: 'yyyy-MM-dd' }}</p>
        <button class="btn-buy" [routerLink]="['/orders', order.orderId]">View Order</button>
      </div>
      <div *ngFor="let item of order.orderItems">
        <app-order-item
          [item]="item"
          [orderStatus]="order.orderStatus"
          [deliveryDate]="order.deliveryDate"
        ></app-order-item>
      </div>
      <p class="total-amount">Total: ${{ order.totalAmount }}</p>
    </div>
  </div>
  <ng-template #emptyStateTemplate>
    <!-- Empty state template -->
  </ng-template>
</div>











// order-list.component.ts
import { Component, OnInit } from '@angular/core';
import { OrderService } from '../../services/order.service';
import { Order } from '../../models/order';

@Component({
  selector: 'app-order-list',
  templateUrl: './order-list.component.html',
  styleUrls: ['./order-list.component.css'],
})
export class OrderListComponent implements OnInit {
  orders: Order[] = [];
  filteredOrders: Order[] = [];
  selectedFilter: string = 'all';
  isEmptyOrders: boolean = false;
  isEmptyInProgressOrders: boolean = false;
  isEmptyDeliveredOrders: boolean = false;
  isEmptyCancelledOrders: boolean = false;

  // Hardcoded userId (replace with dynamic value if needed)
  userId: number = 3; // Replace with the actual userId

  constructor(private orderService: OrderService) {}

  ngOnInit(): void {
    this.fetchOrders();
  }

  fetchOrders(): void {
    this.orderService.getOrders(this.userId).subscribe({
      next: (orders: Order[]) => {
        this.orders = orders;
        console.log('Fetched Orders:', this.orders);
        this.applyFilter();
      },
      error: (error) => {
        console.error('Error fetching orders:', error);
      },
    });
  }

  // Rest of the methods remain the same...
}
































import { Component, Input } from '@angular/core';
import { OrderItem } from '../../models/order';
@Component({
  selector: 'app-order-item',
  standalone: false,
  templateUrl: './order-item.component.html',
  styleUrl: './order-item.component.css'
})
export class OrderItemComponent {
  @Input() item!: OrderItem;
  @Input() orderStatus!:string;
  @Input() deliveryDate!: string;

  getStatusColor(): string {
    switch (this.orderStatus.toLowerCase()) {
      case 'delivered':
        return 'green';
      case 'cancelled':
        return 'red';
      default:
        return 'blue';
    }
  }
}

<div class="order-item">
    <img [src]="'https://m.media-amazon.com/images/I/711fYUFXhcL._SL1500_.jpg'" alt="{{ item.productName }}" class="product-image">
    
    <div class="item-details">
      <h3>{{ item.productName }}</h3>
      <p>Qty: {{ item.quantity }}</p>
      <p class="price">Price: ${{ item.productPrice }}</p>
    </div>
    <div class="status">
      <p>Status</p>
      <p [ngStyle]="{ 'color': getStatusColor() }">{{ orderStatus }}</p>
    </div>
    <div class="delivery">
      <p>Delivery Date</p>
      <p><strong>{{ deliveryDate }}</strong></p>
    </div>
  </div>
import { Component, OnInit } from '@angular/core';
import { OrderService } from '../../services/order.service';
import { Order } from '../../models/order';

@Component({
  selector: 'app-order-list',
  standalone: false,
  templateUrl: './order-list.component.html',
  styleUrl: './order-list.component.css'
})
export class OrderListComponent implements OnInit {
  orders: Order[] = [];
  filteredOrders: Order[] = [];
  selectedFilter: string = 'all';
  isEmptyOrders: boolean = false; // Flag for overall empty orders
  isEmptyInProgressOrders: boolean = false;
  isEmptyDeliveredOrders: boolean = false;
  isEmptyCancelledOrders: boolean = false;

  constructor(private orderService: OrderService) {}

  ngOnInit(): void {
    this.orderService.getOrders().subscribe(data => {
      this.orders = data;
      this.fetchOrders(); // Initialize filteredOrders with all orders
    });
  }

  fetchOrders(): void {
    this.orderService.getOrders().subscribe({ // Use observer argument
        next: (orders: Order[]) => { // next callback
            this.orders = orders;
            console.log('Fetched Orders:', this.orders);
            this.applyFilter();
        },
        error: (error) => { // error callback
            console.error('Error fetching orders:', error);
        }
        // You can add a 'complete' callback here if you need to handleObservable completion
        // complete: () => { console.log('Observable completed'); }
    });
}

setFilter(filterType: string): void {
  console.log('Filter set to:', filterType); // Log when filter is set
  this.selectedFilter = filterType;
  this.applyFilter();
}

applyFilter(): void {
    if (this.selectedFilter === 'all') {
        this.filteredOrders = [...this.orders]; // Show all orders
    } else if (this.selectedFilter === 'inProgress') {
        // Define what "summary" filter means for your orders, adapt logic as needed
        this.filteredOrders = this.orders.filter(order => order.orderStatus === 'PENDING'); // Example - adjust status as needed
    } else if (this.selectedFilter === 'Delivered') {
        this.filteredOrders = this.orders.filter(order => order.orderStatus === 'DELIVERED');
    } else if (this.selectedFilter === 'Cancelled') {
        this.filteredOrders = this.orders.filter(order => order.orderStatus === 'CANCELLED');
    } else {
        this.filteredOrders = [...this.orders]; // Default to showing all if filter is unknown
    }
    console.log('Filtered Orders:', this.filteredOrders);
    this.updateEmptyStateFlags();
}
updateEmptyStateFlags(): void {
  this.isEmptyOrders = this.orders.length === 0;
  this.isEmptyInProgressOrders = this.selectedFilter === 'inProgress' && this.filteredOrders.length === 0;
  this.isEmptyDeliveredOrders = this.selectedFilter === 'Delivered' && this.filteredOrders.length === 0;
  this.isEmptyCancelledOrders = this.selectedFilter === 'Cancelled' && this.filteredOrders.length === 0;
}

isAnyFilterEmpty(): boolean {
  return this.isEmptyOrders || this.isEmptyInProgressOrders || this.isEmptyDeliveredOrders || this.isEmptyCancelledOrders;
}

getEmptyStateMessage(): string {
  if (this.isEmptyOrders) {
      return "You haven't placed any orders yet.";
  } else if (this.isEmptyInProgressOrders) {
      return "No orders in progress.";
  } else if (this.isEmptyDeliveredOrders) {
      return "No delivered orders found.";
  } else if (this.isEmptyCancelledOrders) {
      return "No cancelled orders found.";
  }
  return ""; // Should not reach here in normal cases, but for type safety
}

getEmptyStateIcon(): string {
  if (this.isEmptyOrders) {
      return "bi-box-seam"; // Bootstrap Icon name for empty box
  } else if (this.isEmptyInProgressOrders || this.isEmptyDeliveredOrders || this.isEmptyCancelledOrders) {
      return "bi-search-x"; // Bootstrap Icon name for search with x (no results)
  }
  return ""; // Default, should not be used if isAnyFilterEmpty is checked first
}
}
<div class="order-history-container">
    <h2>Order History</h2>
    <div class="filters">
        <button
            class="filter-item"
            [class.active]="selectedFilter === 'all'"
            (click)="setFilter('all')"
        >All Order</button>
        <button
            class="filter-item"
            [class.active]="selectedFilter === 'inProgress'"
            (click)="setFilter('inProgress')"
        >In Progress</button>
        <button
            class="filter-item"
            [class.active]="selectedFilter === 'Delivered'"
            (click)="setFilter('Delivered')"
        >Delivered</button>
        <button
            class="filter-item"
            [class.active]="selectedFilter === 'Cancelled'"
            (click)="setFilter('Cancelled')"
        >Cancelled</button>
    </div>
    <div *ngIf="!isAnyFilterEmpty(); else emptyStateTemplate">
    <div *ngFor="let order of filteredOrders" class="order-card">
      <div class="order-header">
        <p><strong>Order: #{{ order.orderId }}</strong></p>
        <p>Order Date: {{ order.createdAt | date:'yyyy-MM-dd' }}</p>
        <button class="btn-buy">View Order</button>
      </div>
      
      <div *ngFor="let item of order.orderItems">
        <app-order-item [item]="item" [orderStatus]="order.orderStatus" [deliveryDate]="order.deliveryDate"></app-order-item>
      </div>
  
      <p class="total-amount">Total: ${{ order.totalAmount }}</p>
    </div>
  </div>
  <ng-template #emptyStateTemplate>
    <div class="empty-order-state">
        <i class="bi" [class]="getEmptyStateIcon()" style="font-size: 3rem;"></i> <br> <br>
        <p class="empty-order-message">{{ getEmptyStateMessage() }}</p>
        <p class="empty-order-message">You can browse our products and place an order.</p>
        </div>
</ng-template>
</div>

export interface Order {
    orderId: number;
    userId: number;
    totalAmount: number;
    orderStatus: string;
    deliveryAddress: Address; // Full address object
    deliveryDate: string;
    createdAt: string;
    orderItems: OrderItem[];
  }
  
  export interface Address {
    addressId: number;
    street: string;
    city: string;
    state: string;
    postalCode: string;
    country: string;
  }
  
  export interface OrderItem {
    orderItemId: number;
    productId: number;
    productName: string;
    quantity: number;
    productPrice: number;
    discount: number;
    image: string;
    totalprice: number;
    highlightShippingFee: number;
    createdAt: string;
  }
  import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Order } from '../models/order';

@Injectable({
  providedIn: 'root'
})
export class OrderService {
  private apiUrl = 'http://localhost:8766/api/order/history/3'; // Replace with your backend API URL

  constructor(private http: HttpClient) { }

  getOrders(): Observable<Order[]> {
    return this.http.get<Order[]>(this.apiUrl);
  }
}
package com.genckart.dto;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.sql.Timestamp;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class OrderHistoryDTO {
    private Integer orderHistoryId;
    private Integer orderId;
    private Integer userId;
    private String orderStatus;
}
@Service
@RequiredArgsConstructor
@Transactional
public class OrderServiceImpl implements OrderService {

    private final OrderRepository orderRepository;
    private final OrderItemRepository orderItemRepository;
    private final OrderHistoryRepository orderHistoryRepository;
    private final UserClient userClient;
    private final ProductClient productClient;
    private final CartClient cartClient;

    public OrderDTO getOrderDetails(Integer orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new OrderNotFoundException("Order not found with ID: " + orderId));

        List<OrderItem> orderItems = orderItemRepository.findByOrderId(orderId);
        List<OrderHistory> orderHistory = orderHistoryRepository.findByOrderId(orderId);

        OrderDTO orderDTO = convertToDTO(order);
        orderDTO.setOrderItems(orderItems.stream()
                .map(this::convertToOrderItemDTO)
                .collect(Collectors.toList()));
        orderDTO.setOrderHistory(orderHistory.stream()
                .map(this::convertToOrderHistoryDTO)
                .collect(Collectors.toList()));

        return orderDTO;
    }

    public List<OrderDTO> getOrderHistory(Integer userId) {
        List<Order> orders = orderRepository.findByUserId(userId);
        if (orders.isEmpty()) {
            throw new OrderNotFoundException("No orders found for user ID: " + userId);
        }
        return orders.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    @Transactional
    public void deleteOrder(Integer orderId) {
        if (!orderRepository.existsById(orderId)) {
            throw new OrderNotFoundException("Order not found with ID: " + orderId);
        }
        orderItemRepository.deleteByOrder_OrderId(orderId);
        orderHistoryRepository.deleteByOrder_OrderId(orderId);
        orderRepository.deleteById(orderId);
    }

    private OrderDTO convertToDTO(Order order) {
        OrderDTO orderDTO = new OrderDTO();
        orderDTO.setOrderId(order.getOrderId());
        orderDTO.setUserId(order.getUserId());
        orderDTO.setTotalAmount(order.getTotalAmount());
        orderDTO.setOrderStatus(order.getOrderStatus());
        orderDTO.setDeliveryAddressId(order.getDeliveryAddressId());
        ResponseEntity<AddressDTO> addressResponse = userClient.getAddressById(orderDTO.getUserId());
        AddressDTO userAddress=addressResponse.getBody();
        orderDTO.setDeliveryAddress(userAddress);
        orderDTO.setDeliveryDate(order.getDeliveryDate());
        orderDTO.setCreatedAt(order.getCreatedAt());

        orderDTO.setOrderItems(orderItemRepository.findByOrderId(order.getOrderId())
                .stream().map(this::convertToOrderItemDTO).collect(Collectors.toList()));

        orderDTO.setOrderHistory(orderHistoryRepository.findByOrderId(order.getOrderId())
                .stream().map(this::convertToOrderHistoryDTO).collect(Collectors.toList()));

        return orderDTO;
    }

    private OrderItemDTO convertToOrderItemDTO(OrderItem orderItem) {
        OrderItemDTO orderItemDTO = new OrderItemDTO();
        orderItemDTO.setOrderItemId(orderItem.getOrderItemId());
        orderItemDTO.setProductId(orderItem.getProductId());
        orderItemDTO.setQuantity(orderItem.getQuantity());
        orderItemDTO.setProductPrice(orderItem.getProductPrice());
        orderItemDTO.setTotalPrice(orderItem.getTotalPrice());
        orderItemDTO.setCreatedAt(orderItem.getCreatedAt());

        // Fetch product details from Product Service to get productName, discount, image, shipping fee
        ResponseEntity<ProductDTO> productResponse = productClient.getProductById(orderItem.getProductId());
        if (productResponse.hasBody()) {
            ProductDTO product = productResponse.getBody();
            orderItemDTO.setProductName(product.getName());
            orderItemDTO.setDiscount(product.getDiscount());
            orderItemDTO.setImage(product.getImage1());
            orderItemDTO.setHighlightShippingFee(product.getHighlightShippingFee());
        } else {
            orderItemDTO.setProductName("Unknown Product");
            orderItemDTO.setDiscount(0.0);
            orderItemDTO.setImage(null);
            orderItemDTO.setHighlightShippingFee(0.0);
        }
        return orderItemDTO;
    }

    private OrderHistoryDTO convertToOrderHistoryDTO(OrderHistory orderHistory) {
        OrderHistoryDTO orderHistoryDTO = new OrderHistoryDTO();
        orderHistoryDTO.setOrderHistoryId(orderHistory.getOrderHistoryId());
        orderHistoryDTO.setOrderId(orderHistory.getOrder().getOrderId());
        orderHistoryDTO.setUserId(orderHistory.getUserId());
        orderHistoryDTO.setOrderStatus(orderHistory.getOrderStatus());
        return orderHistoryDTO;
    }
}
  











